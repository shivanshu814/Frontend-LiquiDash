import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  require_hash
} from "./chunk-5VLZPNXK.js";
import {
  defineReadOnly,
  init_lib as init_lib3
} from "./chunk-ZDW35XQC.js";
import {
  arrayify,
  init_lib as init_lib2
} from "./chunk-RISW7J3K.js";
import {
  Logger,
  init_lib
} from "./chunk-PKAQYSTE.js";
import {
  __esm,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-K4ALE4AC.js";

// ../../node_modules/@ethersproject/random/lib.esm/_version.js
var import_dist, import_dist2, import_dist3, version;
var init_version = __esm({
  "../../node_modules/@ethersproject/random/lib.esm/_version.js"() {
    import_dist = __toESM(require_dist());
    import_dist2 = __toESM(require_dist2());
    import_dist3 = __toESM(require_dist3());
    version = "random/5.7.0";
  }
});

// ../../node_modules/@ethersproject/random/lib.esm/random.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
function randomBytes(length) {
  if (length <= 0 || length > 1024 || length % 1 || length != length) {
    logger.throwArgumentError("invalid length", "length", length);
  }
  const result = new Uint8Array(length);
  crypto.getRandomValues(result);
  return arrayify(result);
}
var import_dist4, import_dist5, import_dist6, logger, anyGlobal, crypto;
var init_random = __esm({
  "../../node_modules/@ethersproject/random/lib.esm/random.js"() {
    "use strict";
    import_dist4 = __toESM(require_dist());
    import_dist5 = __toESM(require_dist2());
    import_dist6 = __toESM(require_dist3());
    init_lib2();
    init_lib();
    init_version();
    logger = new Logger(version);
    anyGlobal = getGlobal();
    crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto || !crypto.getRandomValues) {
      logger.warn("WARNING: Missing strong random number source");
      crypto = {
        getRandomValues: function(buffer) {
          return logger.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "crypto.getRandomValues"
          });
        }
      };
    }
  }
});

// ../../node_modules/@ethersproject/random/lib.esm/shuffle.js
function shuffled(array) {
  array = array.slice();
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
  }
  return array;
}
var import_dist7, import_dist8, import_dist9;
var init_shuffle = __esm({
  "../../node_modules/@ethersproject/random/lib.esm/shuffle.js"() {
    "use strict";
    import_dist7 = __toESM(require_dist());
    import_dist8 = __toESM(require_dist2());
    import_dist9 = __toESM(require_dist3());
  }
});

// ../../node_modules/@ethersproject/random/lib.esm/index.js
var import_dist10, import_dist11, import_dist12;
var init_lib4 = __esm({
  "../../node_modules/@ethersproject/random/lib.esm/index.js"() {
    "use strict";
    import_dist10 = __toESM(require_dist());
    import_dist11 = __toESM(require_dist2());
    import_dist12 = __toESM(require_dist3());
    init_random();
    init_shuffle();
  }
});

// ../../node_modules/@ethersproject/basex/lib.esm/index.js
var import_dist13, import_dist14, import_dist15, BaseX, Base32, Base58;
var init_lib5 = __esm({
  "../../node_modules/@ethersproject/basex/lib.esm/index.js"() {
    import_dist13 = __toESM(require_dist());
    import_dist14 = __toESM(require_dist2());
    import_dist15 = __toESM(require_dist3());
    init_lib2();
    init_lib3();
    BaseX = class {
      constructor(alphabet) {
        defineReadOnly(this, "alphabet", alphabet);
        defineReadOnly(this, "base", alphabet.length);
        defineReadOnly(this, "_alphabetMap", {});
        defineReadOnly(this, "_leader", alphabet.charAt(0));
        for (let i = 0; i < alphabet.length; i++) {
          this._alphabetMap[alphabet.charAt(i)] = i;
        }
      }
      encode(value) {
        let source = arrayify(value);
        if (source.length === 0) {
          return "";
        }
        let digits = [0];
        for (let i = 0; i < source.length; ++i) {
          let carry = source[i];
          for (let j = 0; j < digits.length; ++j) {
            carry += digits[j] << 8;
            digits[j] = carry % this.base;
            carry = carry / this.base | 0;
          }
          while (carry > 0) {
            digits.push(carry % this.base);
            carry = carry / this.base | 0;
          }
        }
        let string = "";
        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
          string += this._leader;
        }
        for (let q = digits.length - 1; q >= 0; --q) {
          string += this.alphabet[digits[q]];
        }
        return string;
      }
      decode(value) {
        if (typeof value !== "string") {
          throw new TypeError("Expected String");
        }
        let bytes = [];
        if (value.length === 0) {
          return new Uint8Array(bytes);
        }
        bytes.push(0);
        for (let i = 0; i < value.length; i++) {
          let byte = this._alphabetMap[value[i]];
          if (byte === void 0) {
            throw new Error("Non-base" + this.base + " character");
          }
          let carry = byte;
          for (let j = 0; j < bytes.length; ++j) {
            carry += bytes[j] * this.base;
            bytes[j] = carry & 255;
            carry >>= 8;
          }
          while (carry > 0) {
            bytes.push(carry & 255);
            carry >>= 8;
          }
        }
        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
          bytes.push(0);
        }
        return arrayify(new Uint8Array(bytes.reverse()));
      }
    };
    Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  }
});

// ../../node_modules/@ethersproject/sha2/lib.esm/types.js
var import_dist16, import_dist17, import_dist18, SupportedAlgorithm;
var init_types = __esm({
  "../../node_modules/@ethersproject/sha2/lib.esm/types.js"() {
    import_dist16 = __toESM(require_dist());
    import_dist17 = __toESM(require_dist2());
    import_dist18 = __toESM(require_dist3());
    (function(SupportedAlgorithm2) {
      SupportedAlgorithm2["sha256"] = "sha256";
      SupportedAlgorithm2["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));
  }
});

// ../../node_modules/@ethersproject/sha2/lib.esm/_version.js
var import_dist19, import_dist20, import_dist21, version2;
var init_version2 = __esm({
  "../../node_modules/@ethersproject/sha2/lib.esm/_version.js"() {
    import_dist19 = __toESM(require_dist());
    import_dist20 = __toESM(require_dist2());
    import_dist21 = __toESM(require_dist3());
    version2 = "sha2/5.7.0";
  }
});

// ../../node_modules/@ethersproject/sha2/lib.esm/sha2.js
function ripemd160(data) {
  return "0x" + import_hash.default.ripemd160().update(arrayify(data)).digest("hex");
}
function sha256(data) {
  return "0x" + import_hash.default.sha256().update(arrayify(data)).digest("hex");
}
function sha512(data) {
  return "0x" + import_hash.default.sha512().update(arrayify(data)).digest("hex");
}
function computeHmac(algorithm, key, data) {
  if (!SupportedAlgorithm[algorithm]) {
    logger2.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm
    });
  }
  return "0x" + import_hash.default.hmac(import_hash.default[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
}
var import_dist22, import_dist23, import_dist24, import_hash, logger2;
var init_sha2 = __esm({
  "../../node_modules/@ethersproject/sha2/lib.esm/sha2.js"() {
    "use strict";
    import_dist22 = __toESM(require_dist());
    import_dist23 = __toESM(require_dist2());
    import_dist24 = __toESM(require_dist3());
    import_hash = __toESM(require_hash());
    init_lib2();
    init_types();
    init_lib();
    init_version2();
    logger2 = new Logger(version2);
  }
});

// ../../node_modules/@ethersproject/sha2/lib.esm/index.js
var import_dist25, import_dist26, import_dist27;
var init_lib6 = __esm({
  "../../node_modules/@ethersproject/sha2/lib.esm/index.js"() {
    import_dist25 = __toESM(require_dist());
    import_dist26 = __toESM(require_dist2());
    import_dist27 = __toESM(require_dist3());
    init_sha2();
    init_types();
  }
});

export {
  Base58,
  init_lib5 as init_lib,
  SupportedAlgorithm,
  ripemd160,
  sha256,
  sha512,
  computeHmac,
  init_lib6 as init_lib2,
  randomBytes,
  shuffled,
  init_lib4 as init_lib3
};
//# sourceMappingURL=chunk-73VAFVUY.js.map
