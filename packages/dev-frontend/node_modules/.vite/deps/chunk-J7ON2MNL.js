import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  parseProps
} from "./chunk-QMD2Q3VX.js";
import {
  require_jsx_runtime
} from "./chunk-X26U7Q34.js";
import {
  Emotion$1,
  createEmotionProps,
  hasOwn
} from "./chunk-CUGAHU5S.js";
import {
  require_hoist_non_react_statics_cjs
} from "./chunk-RRRU7EKL.js";
import {
  require_react
} from "./chunk-KMCPJVSV.js";
import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-K4ALE4AC.js";

// ../../node_modules/@theme-ui/core/jsx-runtime/dist/theme-ui-core-jsx-runtime.browser.esm.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());

// ../../node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
var ReactJSXRuntime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
function jsx2(type, props, key) {
  if (!hasOwn.call(props, "css")) {
    return ReactJSXRuntime.jsx(type, props, key);
  }
  return ReactJSXRuntime.jsx(Emotion$1, createEmotionProps(type, props), key);
}
function jsxs2(type, props, key) {
  if (!hasOwn.call(props, "css")) {
    return ReactJSXRuntime.jsxs(type, props, key);
  }
  return ReactJSXRuntime.jsxs(Emotion$1, createEmotionProps(type, props), key);
}

// ../../node_modules/@theme-ui/core/jsx-runtime/dist/theme-ui-core-jsx-runtime.browser.esm.js
var import_react2 = __toESM(require_react());
var jsx3 = (type, props, key) => jsx2(type, parseProps(props), key);
var jsxs3 = (type, props, key) => jsxs2(type, parseProps(props), key);

export {
  jsx3 as jsx,
  jsxs3 as jsxs
};
//# sourceMappingURL=chunk-J7ON2MNL.js.map
