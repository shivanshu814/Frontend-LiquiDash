import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'

globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
globalThis.global = globalThis.global || __global_polyfill
globalThis.process = globalThis.process || __process_polyfill

import {
  require_define_properties
} from "./chunk-HDJZBC4S.js";
import {
  require_call_bind
} from "./chunk-ZCPJBDWS.js";
import {
  __commonJS,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-K4ALE4AC.js";

// ../../node_modules/is-nan/implementation.js
var require_implementation = __commonJS({
  "../../node_modules/is-nan/implementation.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    module.exports = function isNaN(value) {
      return value !== value;
    };
  }
});

// ../../node_modules/is-nan/polyfill.js
var require_polyfill = __commonJS({
  "../../node_modules/is-nan/polyfill.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var implementation = require_implementation();
    module.exports = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation;
    };
  }
});

// ../../node_modules/is-nan/shim.js
var require_shim = __commonJS({
  "../../node_modules/is-nan/shim.js"(exports, module) {
    "use strict";
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var define = require_define_properties();
    var getPolyfill = require_polyfill();
    module.exports = function shimNumberIsNaN() {
      var polyfill = getPolyfill();
      define(Number, { isNaN: polyfill }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// ../../node_modules/is-nan/index.js
var require_is_nan = __commonJS({
  "../../node_modules/is-nan/index.js"(exports, module) {
    var import_dist = __toESM(require_dist());
    var import_dist2 = __toESM(require_dist2());
    var import_dist3 = __toESM(require_dist3());
    var callBind = require_call_bind();
    var define = require_define_properties();
    var implementation = require_implementation();
    var getPolyfill = require_polyfill();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Number);
    define(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = polyfill;
  }
});

export {
  require_is_nan
};
//# sourceMappingURL=chunk-EA2ZQK4D.js.map
