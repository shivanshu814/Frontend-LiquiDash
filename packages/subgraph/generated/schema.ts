// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Global extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Global entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Global must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Global", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Global | null {
    return changetype<Global | null>(store.get_in_block("Global", id));
  }

  static load(id: string): Global | null {
    return changetype<Global | null>(store.get("Global", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get systemStateCount(): i32 {
    let value = this.get("systemStateCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set systemStateCount(value: i32) {
    this.set("systemStateCount", Value.fromI32(value));
  }

  get transactionCount(): i32 {
    let value = this.get("transactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set transactionCount(value: i32) {
    this.set("transactionCount", Value.fromI32(value));
  }

  get changeCount(): i32 {
    let value = this.get("changeCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set changeCount(value: i32) {
    this.set("changeCount", Value.fromI32(value));
  }

  get liquidationCount(): i32 {
    let value = this.get("liquidationCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidationCount(value: i32) {
    this.set("liquidationCount", Value.fromI32(value));
  }

  get redemptionCount(): i32 {
    let value = this.get("redemptionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set redemptionCount(value: i32) {
    this.set("redemptionCount", Value.fromI32(value));
  }

  get numberOfOpenTroves(): i32 {
    let value = this.get("numberOfOpenTroves");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numberOfOpenTroves(value: i32) {
    this.set("numberOfOpenTroves", Value.fromI32(value));
  }

  get numberOfLiquidatedTroves(): i32 {
    let value = this.get("numberOfLiquidatedTroves");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numberOfLiquidatedTroves(value: i32) {
    this.set("numberOfLiquidatedTroves", Value.fromI32(value));
  }

  get numberOfRedeemedTroves(): i32 {
    let value = this.get("numberOfRedeemedTroves");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numberOfRedeemedTroves(value: i32) {
    this.set("numberOfRedeemedTroves", Value.fromI32(value));
  }

  get numberOfTrovesClosedByOwner(): i32 {
    let value = this.get("numberOfTrovesClosedByOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numberOfTrovesClosedByOwner(value: i32) {
    this.set("numberOfTrovesClosedByOwner", Value.fromI32(value));
  }

  get totalNumberOfTroves(): i32 {
    let value = this.get("totalNumberOfTroves");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalNumberOfTroves(value: i32) {
    this.set("totalNumberOfTroves", Value.fromI32(value));
  }

  get totalNumberOfLQTYStakes(): i32 {
    let value = this.get("totalNumberOfLQTYStakes");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalNumberOfLQTYStakes(value: i32) {
    this.set("totalNumberOfLQTYStakes", Value.fromI32(value));
  }

  get numberOfActiveLQTYStakes(): i32 {
    let value = this.get("numberOfActiveLQTYStakes");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numberOfActiveLQTYStakes(value: i32) {
    this.set("numberOfActiveLQTYStakes", Value.fromI32(value));
  }

  get totalBorrowingFeesPaid(): BigDecimal {
    let value = this.get("totalBorrowingFeesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowingFeesPaid(value: BigDecimal) {
    this.set("totalBorrowingFeesPaid", Value.fromBigDecimal(value));
  }

  get totalRedemptionFeesPaid(): BigDecimal {
    let value = this.get("totalRedemptionFeesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalRedemptionFeesPaid(value: BigDecimal) {
    this.set("totalRedemptionFeesPaid", Value.fromBigDecimal(value));
  }

  get rawTotalRedistributedCollateral(): BigInt {
    let value = this.get("rawTotalRedistributedCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rawTotalRedistributedCollateral(value: BigInt) {
    this.set("rawTotalRedistributedCollateral", Value.fromBigInt(value));
  }

  get rawTotalRedistributedDebt(): BigInt {
    let value = this.get("rawTotalRedistributedDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rawTotalRedistributedDebt(value: BigInt) {
    this.set("rawTotalRedistributedDebt", Value.fromBigInt(value));
  }

  get currentSystemState(): string | null {
    let value = this.get("currentSystemState");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentSystemState(value: string | null) {
    if (!value) {
      this.unset("currentSystemState");
    } else {
      this.set("currentSystemState", Value.fromString(<string>value));
    }
  }

  get currentLiquidation(): string | null {
    let value = this.get("currentLiquidation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentLiquidation(value: string | null) {
    if (!value) {
      this.unset("currentLiquidation");
    } else {
      this.set("currentLiquidation", Value.fromString(<string>value));
    }
  }

  get currentRedemption(): string | null {
    let value = this.get("currentRedemption");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentRedemption(value: string | null) {
    if (!value) {
      this.unset("currentRedemption");
    } else {
      this.set("currentRedemption", Value.fromString(<string>value));
    }
  }

  get tmpDepositUpdate(): BigInt | null {
    let value = this.get("tmpDepositUpdate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tmpDepositUpdate(value: BigInt | null) {
    if (!value) {
      this.unset("tmpDepositUpdate");
    } else {
      this.set("tmpDepositUpdate", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SystemState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SystemState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SystemState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SystemState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SystemState | null {
    return changetype<SystemState | null>(
      store.get_in_block("SystemState", id),
    );
  }

  static load(id: string): SystemState | null {
    return changetype<SystemState | null>(store.get("SystemState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get price(): BigDecimal | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalCollateral(): BigDecimal {
    let value = this.get("totalCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalCollateral(value: BigDecimal) {
    this.set("totalCollateral", Value.fromBigDecimal(value));
  }

  get totalDebt(): BigDecimal {
    let value = this.get("totalDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalDebt(value: BigDecimal) {
    this.set("totalDebt", Value.fromBigDecimal(value));
  }

  get totalCollateralRatio(): BigDecimal | null {
    let value = this.get("totalCollateralRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalCollateralRatio(value: BigDecimal | null) {
    if (!value) {
      this.unset("totalCollateralRatio");
    } else {
      this.set("totalCollateralRatio", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get tokensInStabilityPool(): BigDecimal {
    let value = this.get("tokensInStabilityPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokensInStabilityPool(value: BigDecimal) {
    this.set("tokensInStabilityPool", Value.fromBigDecimal(value));
  }

  get collSurplusPoolBalance(): BigDecimal {
    let value = this.get("collSurplusPoolBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collSurplusPoolBalance(value: BigDecimal) {
    this.set("collSurplusPoolBalance", Value.fromBigDecimal(value));
  }

  get totalLQTYTokensStaked(): BigDecimal {
    let value = this.get("totalLQTYTokensStaked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLQTYTokensStaked(value: BigDecimal) {
    this.set("totalLQTYTokensStaked", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trove(): string | null {
    let value = this.get("trove");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set trove(value: string | null) {
    if (!value) {
      this.unset("trove");
    } else {
      this.set("trove", Value.fromString(<string>value));
    }
  }

  get stabilityDeposit(): string | null {
    let value = this.get("stabilityDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stabilityDeposit(value: string | null) {
    if (!value) {
      this.unset("stabilityDeposit");
    } else {
      this.set("stabilityDeposit", Value.fromString(<string>value));
    }
  }

  get stake(): string | null {
    let value = this.get("stake");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set stake(value: string | null) {
    if (!value) {
      this.unset("stake");
    } else {
      this.set("stake", Value.fromString(<string>value));
    }
  }

  get frontend(): string | null {
    let value = this.get("frontend");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set frontend(value: string | null) {
    if (!value) {
      this.unset("frontend");
    } else {
      this.set("frontend", Value.fromString(<string>value));
    }
  }

  get collSurplus(): BigDecimal {
    let value = this.get("collSurplus");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collSurplus(value: BigDecimal) {
    this.set("collSurplus", Value.fromBigDecimal(value));
  }

  get collSurplusChanges(): CollSurplusChangeLoader {
    return new CollSurplusChangeLoader(
      "User",
      this.get("id")!.toString(),
      "collSurplusChanges",
    );
  }

  get liquidations(): LiquidationLoader {
    return new LiquidationLoader(
      "User",
      this.get("id")!.toString(),
      "liquidations",
    );
  }

  get redemptions(): RedemptionLoader {
    return new RedemptionLoader(
      "User",
      this.get("id")!.toString(),
      "redemptions",
    );
  }

  get balances(): TokenBalanceLoader {
    return new TokenBalanceLoader(
      "User",
      this.get("id")!.toString(),
      "balances",
    );
  }

  get allowances(): TokenAllowanceLoader {
    return new TokenAllowanceLoader(
      "User",
      this.get("id")!.toString(),
      "allowances",
    );
  }
}

export class Trove extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trove entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trove must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Trove", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Trove | null {
    return changetype<Trove | null>(store.get_in_block("Trove", id));
  }

  static load(id: string): Trove | null {
    return changetype<Trove | null>(store.get("Trove", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get collateral(): BigDecimal {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateral(value: BigDecimal) {
    this.set("collateral", Value.fromBigDecimal(value));
  }

  get debt(): BigDecimal {
    let value = this.get("debt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set debt(value: BigDecimal) {
    this.set("debt", Value.fromBigDecimal(value));
  }

  get changes(): TroveChangeLoader {
    return new TroveChangeLoader(
      "Trove",
      this.get("id")!.toString(),
      "changes",
    );
  }

  get rawCollateral(): BigInt {
    let value = this.get("rawCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rawCollateral(value: BigInt) {
    this.set("rawCollateral", Value.fromBigInt(value));
  }

  get rawDebt(): BigInt {
    let value = this.get("rawDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rawDebt(value: BigInt) {
    this.set("rawDebt", Value.fromBigInt(value));
  }

  get rawStake(): BigInt {
    let value = this.get("rawStake");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rawStake(value: BigInt) {
    this.set("rawStake", Value.fromBigInt(value));
  }

  get rawSnapshotOfTotalRedistributedCollateral(): BigInt {
    let value = this.get("rawSnapshotOfTotalRedistributedCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rawSnapshotOfTotalRedistributedCollateral(value: BigInt) {
    this.set(
      "rawSnapshotOfTotalRedistributedCollateral",
      Value.fromBigInt(value),
    );
  }

  get rawSnapshotOfTotalRedistributedDebt(): BigInt {
    let value = this.get("rawSnapshotOfTotalRedistributedDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rawSnapshotOfTotalRedistributedDebt(value: BigInt) {
    this.set("rawSnapshotOfTotalRedistributedDebt", Value.fromBigInt(value));
  }

  get collateralRatioSortKey(): BigInt | null {
    let value = this.get("collateralRatioSortKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateralRatioSortKey(value: BigInt | null) {
    if (!value) {
      this.unset("collateralRatioSortKey");
    } else {
      this.set("collateralRatioSortKey", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class StabilityDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StabilityDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StabilityDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StabilityDeposit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StabilityDeposit | null {
    return changetype<StabilityDeposit | null>(
      store.get_in_block("StabilityDeposit", id),
    );
  }

  static load(id: string): StabilityDeposit | null {
    return changetype<StabilityDeposit | null>(
      store.get("StabilityDeposit", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get depositedAmount(): BigDecimal {
    let value = this.get("depositedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set depositedAmount(value: BigDecimal) {
    this.set("depositedAmount", Value.fromBigDecimal(value));
  }

  get frontend(): string | null {
    let value = this.get("frontend");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set frontend(value: string | null) {
    if (!value) {
      this.unset("frontend");
    } else {
      this.set("frontend", Value.fromString(<string>value));
    }
  }

  get changes(): StabilityDepositChangeLoader {
    return new StabilityDepositChangeLoader(
      "StabilityDeposit",
      this.get("id")!.toString(),
      "changes",
    );
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id),
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class TroveChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TroveChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TroveChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TroveChange", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TroveChange | null {
    return changetype<TroveChange | null>(
      store.get_in_block("TroveChange", id),
    );
  }

  static load(id: string): TroveChange | null {
    return changetype<TroveChange | null>(store.get("TroveChange", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get systemStateBefore(): string {
    let value = this.get("systemStateBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateBefore(value: string) {
    this.set("systemStateBefore", Value.fromString(value));
  }

  get systemStateAfter(): string {
    let value = this.get("systemStateAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateAfter(value: string) {
    this.set("systemStateAfter", Value.fromString(value));
  }

  get trove(): string {
    let value = this.get("trove");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set trove(value: string) {
    this.set("trove", Value.fromString(value));
  }

  get troveOperation(): string {
    let value = this.get("troveOperation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set troveOperation(value: string) {
    this.set("troveOperation", Value.fromString(value));
  }

  get collateralBefore(): BigDecimal {
    let value = this.get("collateralBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralBefore(value: BigDecimal) {
    this.set("collateralBefore", Value.fromBigDecimal(value));
  }

  get collateralChange(): BigDecimal {
    let value = this.get("collateralChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralChange(value: BigDecimal) {
    this.set("collateralChange", Value.fromBigDecimal(value));
  }

  get collateralAfter(): BigDecimal {
    let value = this.get("collateralAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralAfter(value: BigDecimal) {
    this.set("collateralAfter", Value.fromBigDecimal(value));
  }

  get debtBefore(): BigDecimal {
    let value = this.get("debtBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set debtBefore(value: BigDecimal) {
    this.set("debtBefore", Value.fromBigDecimal(value));
  }

  get debtChange(): BigDecimal {
    let value = this.get("debtChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set debtChange(value: BigDecimal) {
    this.set("debtChange", Value.fromBigDecimal(value));
  }

  get debtAfter(): BigDecimal {
    let value = this.get("debtAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set debtAfter(value: BigDecimal) {
    this.set("debtAfter", Value.fromBigDecimal(value));
  }

  get borrowingFee(): BigDecimal | null {
    let value = this.get("borrowingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowingFee(value: BigDecimal | null) {
    if (!value) {
      this.unset("borrowingFee");
    } else {
      this.set("borrowingFee", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get collateralRatioBefore(): BigDecimal | null {
    let value = this.get("collateralRatioBefore");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralRatioBefore(value: BigDecimal | null) {
    if (!value) {
      this.unset("collateralRatioBefore");
    } else {
      this.set(
        "collateralRatioBefore",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get collateralRatioAfter(): BigDecimal | null {
    let value = this.get("collateralRatioAfter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralRatioAfter(value: BigDecimal | null) {
    if (!value) {
      this.unset("collateralRatioAfter");
    } else {
      this.set("collateralRatioAfter", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get liquidation(): string | null {
    let value = this.get("liquidation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidation(value: string | null) {
    if (!value) {
      this.unset("liquidation");
    } else {
      this.set("liquidation", Value.fromString(<string>value));
    }
  }

  get redemption(): string | null {
    let value = this.get("redemption");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set redemption(value: string | null) {
    if (!value) {
      this.unset("redemption");
    } else {
      this.set("redemption", Value.fromString(<string>value));
    }
  }
}

export class StabilityDepositChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StabilityDepositChange entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StabilityDepositChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StabilityDepositChange", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StabilityDepositChange | null {
    return changetype<StabilityDepositChange | null>(
      store.get_in_block("StabilityDepositChange", id),
    );
  }

  static load(id: string): StabilityDepositChange | null {
    return changetype<StabilityDepositChange | null>(
      store.get("StabilityDepositChange", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get systemStateBefore(): string {
    let value = this.get("systemStateBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateBefore(value: string) {
    this.set("systemStateBefore", Value.fromString(value));
  }

  get systemStateAfter(): string {
    let value = this.get("systemStateAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateAfter(value: string) {
    this.set("systemStateAfter", Value.fromString(value));
  }

  get stabilityDeposit(): string {
    let value = this.get("stabilityDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set stabilityDeposit(value: string) {
    this.set("stabilityDeposit", Value.fromString(value));
  }

  get stabilityDepositOperation(): string {
    let value = this.get("stabilityDepositOperation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set stabilityDepositOperation(value: string) {
    this.set("stabilityDepositOperation", Value.fromString(value));
  }

  get depositedAmountBefore(): BigDecimal {
    let value = this.get("depositedAmountBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set depositedAmountBefore(value: BigDecimal) {
    this.set("depositedAmountBefore", Value.fromBigDecimal(value));
  }

  get depositedAmountChange(): BigDecimal {
    let value = this.get("depositedAmountChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set depositedAmountChange(value: BigDecimal) {
    this.set("depositedAmountChange", Value.fromBigDecimal(value));
  }

  get depositedAmountAfter(): BigDecimal {
    let value = this.get("depositedAmountAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set depositedAmountAfter(value: BigDecimal) {
    this.set("depositedAmountAfter", Value.fromBigDecimal(value));
  }

  get collateralGain(): BigDecimal | null {
    let value = this.get("collateralGain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralGain(value: BigDecimal | null) {
    if (!value) {
      this.unset("collateralGain");
    } else {
      this.set("collateralGain", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class PriceChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PriceChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PriceChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceChange", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PriceChange | null {
    return changetype<PriceChange | null>(
      store.get_in_block("PriceChange", id),
    );
  }

  static load(id: string): PriceChange | null {
    return changetype<PriceChange | null>(store.get("PriceChange", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get systemStateBefore(): string {
    let value = this.get("systemStateBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateBefore(value: string) {
    this.set("systemStateBefore", Value.fromString(value));
  }

  get systemStateAfter(): string {
    let value = this.get("systemStateAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateAfter(value: string) {
    this.set("systemStateAfter", Value.fromString(value));
  }

  get priceChange(): BigDecimal {
    let value = this.get("priceChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set priceChange(value: BigDecimal) {
    this.set("priceChange", Value.fromBigDecimal(value));
  }
}

export class Liquidation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Liquidation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Liquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Liquidation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Liquidation | null {
    return changetype<Liquidation | null>(
      store.get_in_block("Liquidation", id),
    );
  }

  static load(id: string): Liquidation | null {
    return changetype<Liquidation | null>(store.get("Liquidation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get liquidator(): string {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set liquidator(value: string) {
    this.set("liquidator", Value.fromString(value));
  }

  get liquidatedDebt(): BigDecimal {
    let value = this.get("liquidatedDebt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidatedDebt(value: BigDecimal) {
    this.set("liquidatedDebt", Value.fromBigDecimal(value));
  }

  get liquidatedCollateral(): BigDecimal {
    let value = this.get("liquidatedCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidatedCollateral(value: BigDecimal) {
    this.set("liquidatedCollateral", Value.fromBigDecimal(value));
  }

  get collGasCompensation(): BigDecimal {
    let value = this.get("collGasCompensation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collGasCompensation(value: BigDecimal) {
    this.set("collGasCompensation", Value.fromBigDecimal(value));
  }

  get tokenGasCompensation(): BigDecimal {
    let value = this.get("tokenGasCompensation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokenGasCompensation(value: BigDecimal) {
    this.set("tokenGasCompensation", Value.fromBigDecimal(value));
  }

  get troveChanges(): TroveChangeLoader {
    return new TroveChangeLoader(
      "Liquidation",
      this.get("id")!.toString(),
      "troveChanges",
    );
  }
}

export class Redemption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redemption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Redemption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Redemption", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Redemption | null {
    return changetype<Redemption | null>(store.get_in_block("Redemption", id));
  }

  static load(id: string): Redemption | null {
    return changetype<Redemption | null>(store.get("Redemption", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get redeemer(): string {
    let value = this.get("redeemer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set redeemer(value: string) {
    this.set("redeemer", Value.fromString(value));
  }

  get tokensAttemptedToRedeem(): BigDecimal {
    let value = this.get("tokensAttemptedToRedeem");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokensAttemptedToRedeem(value: BigDecimal) {
    this.set("tokensAttemptedToRedeem", Value.fromBigDecimal(value));
  }

  get tokensActuallyRedeemed(): BigDecimal {
    let value = this.get("tokensActuallyRedeemed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set tokensActuallyRedeemed(value: BigDecimal) {
    this.set("tokensActuallyRedeemed", Value.fromBigDecimal(value));
  }

  get collateralRedeemed(): BigDecimal {
    let value = this.get("collateralRedeemed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralRedeemed(value: BigDecimal) {
    this.set("collateralRedeemed", Value.fromBigDecimal(value));
  }

  get partial(): boolean {
    let value = this.get("partial");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set partial(value: boolean) {
    this.set("partial", Value.fromBoolean(value));
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }

  get troveChanges(): TroveChangeLoader {
    return new TroveChangeLoader(
      "Redemption",
      this.get("id")!.toString(),
      "troveChanges",
    );
  }
}

export class CollSurplusChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollSurplusChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollSurplusChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CollSurplusChange", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollSurplusChange | null {
    return changetype<CollSurplusChange | null>(
      store.get_in_block("CollSurplusChange", id),
    );
  }

  static load(id: string): CollSurplusChange | null {
    return changetype<CollSurplusChange | null>(
      store.get("CollSurplusChange", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get systemStateBefore(): string {
    let value = this.get("systemStateBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateBefore(value: string) {
    this.set("systemStateBefore", Value.fromString(value));
  }

  get systemStateAfter(): string {
    let value = this.get("systemStateAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateAfter(value: string) {
    this.set("systemStateAfter", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get collSurplusBefore(): BigDecimal {
    let value = this.get("collSurplusBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collSurplusBefore(value: BigDecimal) {
    this.set("collSurplusBefore", Value.fromBigDecimal(value));
  }

  get collSurplusChange(): BigDecimal {
    let value = this.get("collSurplusChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collSurplusChange(value: BigDecimal) {
    this.set("collSurplusChange", Value.fromBigDecimal(value));
  }

  get collSurplusAfter(): BigDecimal {
    let value = this.get("collSurplusAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collSurplusAfter(value: BigDecimal) {
    this.set("collSurplusAfter", Value.fromBigDecimal(value));
  }
}

export class LqtyStake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LqtyStake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LqtyStake must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LqtyStake", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LqtyStake | null {
    return changetype<LqtyStake | null>(store.get_in_block("LqtyStake", id));
  }

  static load(id: string): LqtyStake | null {
    return changetype<LqtyStake | null>(store.get("LqtyStake", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get changes(): LqtyStakeChangeLoader {
    return new LqtyStakeChangeLoader(
      "LqtyStake",
      this.get("id")!.toString(),
      "changes",
    );
  }
}

export class LqtyStakeChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LqtyStakeChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LqtyStakeChange must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("LqtyStakeChange", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LqtyStakeChange | null {
    return changetype<LqtyStakeChange | null>(
      store.get_in_block("LqtyStakeChange", id),
    );
  }

  static load(id: string): LqtyStakeChange | null {
    return changetype<LqtyStakeChange | null>(store.get("LqtyStakeChange", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sequenceNumber(): i32 {
    let value = this.get("sequenceNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sequenceNumber(value: i32) {
    this.set("sequenceNumber", Value.fromI32(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get systemStateBefore(): string {
    let value = this.get("systemStateBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateBefore(value: string) {
    this.set("systemStateBefore", Value.fromString(value));
  }

  get systemStateAfter(): string {
    let value = this.get("systemStateAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set systemStateAfter(value: string) {
    this.set("systemStateAfter", Value.fromString(value));
  }

  get stake(): string {
    let value = this.get("stake");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set stake(value: string) {
    this.set("stake", Value.fromString(value));
  }

  get stakeOperation(): string {
    let value = this.get("stakeOperation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set stakeOperation(value: string) {
    this.set("stakeOperation", Value.fromString(value));
  }

  get stakedAmountBefore(): BigDecimal {
    let value = this.get("stakedAmountBefore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set stakedAmountBefore(value: BigDecimal) {
    this.set("stakedAmountBefore", Value.fromBigDecimal(value));
  }

  get stakedAmountChange(): BigDecimal {
    let value = this.get("stakedAmountChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set stakedAmountChange(value: BigDecimal) {
    this.set("stakedAmountChange", Value.fromBigDecimal(value));
  }

  get stakedAmountAfter(): BigDecimal {
    let value = this.get("stakedAmountAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set stakedAmountAfter(value: BigDecimal) {
    this.set("stakedAmountAfter", Value.fromBigDecimal(value));
  }

  get issuanceGain(): BigDecimal {
    let value = this.get("issuanceGain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set issuanceGain(value: BigDecimal) {
    this.set("issuanceGain", Value.fromBigDecimal(value));
  }

  get redemptionGain(): BigDecimal {
    let value = this.get("redemptionGain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set redemptionGain(value: BigDecimal) {
    this.set("redemptionGain", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get balances(): TokenBalanceLoader {
    return new TokenBalanceLoader(
      "Token",
      this.get("id")!.toString(),
      "balances",
    );
  }

  get allowances(): TokenAllowanceLoader {
    return new TokenAllowanceLoader(
      "Token",
      this.get("id")!.toString(),
      "allowances",
    );
  }
}

export class TokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenBalance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenBalance | null {
    return changetype<TokenBalance | null>(
      store.get_in_block("TokenBalance", id),
    );
  }

  static load(id: string): TokenBalance | null {
    return changetype<TokenBalance | null>(store.get("TokenBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class TokenAllowance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenAllowance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenAllowance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenAllowance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenAllowance | null {
    return changetype<TokenAllowance | null>(
      store.get_in_block("TokenAllowance", id),
    );
  }

  static load(id: string): TokenAllowance | null {
    return changetype<TokenAllowance | null>(store.get("TokenAllowance", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class Frontend extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Frontend entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Frontend must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Frontend", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Frontend | null {
    return changetype<Frontend | null>(store.get_in_block("Frontend", id));
  }

  static load(id: string): Frontend | null {
    return changetype<Frontend | null>(store.get("Frontend", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get kickbackRate(): BigDecimal {
    let value = this.get("kickbackRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set kickbackRate(value: BigDecimal) {
    this.set("kickbackRate", Value.fromBigDecimal(value));
  }

  get deposits(): StabilityDepositLoader {
    return new StabilityDepositLoader(
      "Frontend",
      this.get("id")!.toString(),
      "deposits",
    );
  }
}

export class CollSurplusChangeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CollSurplusChange[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CollSurplusChange[]>(value);
  }
}

export class LiquidationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Liquidation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Liquidation[]>(value);
  }
}

export class RedemptionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Redemption[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Redemption[]>(value);
  }
}

export class TokenBalanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenBalance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenBalance[]>(value);
  }
}

export class TokenAllowanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenAllowance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenAllowance[]>(value);
  }
}

export class TroveChangeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TroveChange[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TroveChange[]>(value);
  }
}

export class StabilityDepositChangeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): StabilityDepositChange[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<StabilityDepositChange[]>(value);
  }
}

export class LqtyStakeChangeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LqtyStakeChange[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LqtyStakeChange[]>(value);
  }
}

export class StabilityDepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): StabilityDeposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<StabilityDeposit[]>(value);
  }
}
