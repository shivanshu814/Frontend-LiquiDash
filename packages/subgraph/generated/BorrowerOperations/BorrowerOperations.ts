// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ActivePoolAddressChanged extends ethereum.Event {
  get params(): ActivePoolAddressChanged__Params {
    return new ActivePoolAddressChanged__Params(this);
  }
}

export class ActivePoolAddressChanged__Params {
  _event: ActivePoolAddressChanged;

  constructor(event: ActivePoolAddressChanged) {
    this._event = event;
  }

  get _activePoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollSurplusPoolAddressChanged extends ethereum.Event {
  get params(): CollSurplusPoolAddressChanged__Params {
    return new CollSurplusPoolAddressChanged__Params(this);
  }
}

export class CollSurplusPoolAddressChanged__Params {
  _event: CollSurplusPoolAddressChanged;

  constructor(event: CollSurplusPoolAddressChanged) {
    this._event = event;
  }

  get _collSurplusPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DefaultPoolAddressChanged extends ethereum.Event {
  get params(): DefaultPoolAddressChanged__Params {
    return new DefaultPoolAddressChanged__Params(this);
  }
}

export class DefaultPoolAddressChanged__Params {
  _event: DefaultPoolAddressChanged;

  constructor(event: DefaultPoolAddressChanged) {
    this._event = event;
  }

  get _defaultPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GasPoolAddressChanged extends ethereum.Event {
  get params(): GasPoolAddressChanged__Params {
    return new GasPoolAddressChanged__Params(this);
  }
}

export class GasPoolAddressChanged__Params {
  _event: GasPoolAddressChanged;

  constructor(event: GasPoolAddressChanged) {
    this._event = event;
  }

  get _gasPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LQTYStakingAddressChanged extends ethereum.Event {
  get params(): LQTYStakingAddressChanged__Params {
    return new LQTYStakingAddressChanged__Params(this);
  }
}

export class LQTYStakingAddressChanged__Params {
  _event: LQTYStakingAddressChanged;

  constructor(event: LQTYStakingAddressChanged) {
    this._event = event;
  }

  get _lqtyStakingAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LUSDBorrowingFeePaid extends ethereum.Event {
  get params(): LUSDBorrowingFeePaid__Params {
    return new LUSDBorrowingFeePaid__Params(this);
  }
}

export class LUSDBorrowingFeePaid__Params {
  _event: LUSDBorrowingFeePaid;

  constructor(event: LUSDBorrowingFeePaid) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _LUSDFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LUSDTokenAddressChanged extends ethereum.Event {
  get params(): LUSDTokenAddressChanged__Params {
    return new LUSDTokenAddressChanged__Params(this);
  }
}

export class LUSDTokenAddressChanged__Params {
  _event: LUSDTokenAddressChanged;

  constructor(event: LUSDTokenAddressChanged) {
    this._event = event;
  }

  get _lusdTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PriceFeedAddressChanged extends ethereum.Event {
  get params(): PriceFeedAddressChanged__Params {
    return new PriceFeedAddressChanged__Params(this);
  }
}

export class PriceFeedAddressChanged__Params {
  _event: PriceFeedAddressChanged;

  constructor(event: PriceFeedAddressChanged) {
    this._event = event;
  }

  get _newPriceFeedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SortedTrovesAddressChanged extends ethereum.Event {
  get params(): SortedTrovesAddressChanged__Params {
    return new SortedTrovesAddressChanged__Params(this);
  }
}

export class SortedTrovesAddressChanged__Params {
  _event: SortedTrovesAddressChanged;

  constructor(event: SortedTrovesAddressChanged) {
    this._event = event;
  }

  get _sortedTrovesAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StabilityPoolAddressChanged extends ethereum.Event {
  get params(): StabilityPoolAddressChanged__Params {
    return new StabilityPoolAddressChanged__Params(this);
  }
}

export class StabilityPoolAddressChanged__Params {
  _event: StabilityPoolAddressChanged;

  constructor(event: StabilityPoolAddressChanged) {
    this._event = event;
  }

  get _stabilityPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TroveCreated extends ethereum.Event {
  get params(): TroveCreated__Params {
    return new TroveCreated__Params(this);
  }
}

export class TroveCreated__Params {
  _event: TroveCreated;

  constructor(event: TroveCreated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get arrayIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TroveManagerAddressChanged extends ethereum.Event {
  get params(): TroveManagerAddressChanged__Params {
    return new TroveManagerAddressChanged__Params(this);
  }
}

export class TroveManagerAddressChanged__Params {
  _event: TroveManagerAddressChanged;

  constructor(event: TroveManagerAddressChanged) {
    this._event = event;
  }

  get _newTroveManagerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TroveUpdated extends ethereum.Event {
  get params(): TroveUpdated__Params {
    return new TroveUpdated__Params(this);
  }
}

export class TroveUpdated__Params {
  _event: TroveUpdated;

  constructor(event: TroveUpdated) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _coll(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stake(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get operation(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class BorrowerOperations extends ethereum.SmartContract {
  static bind(address: Address): BorrowerOperations {
    return new BorrowerOperations("BorrowerOperations", address);
  }

  BORROWING_FEE_FLOOR(): BigInt {
    let result = super.call(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BORROWING_FEE_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CCR(): BigInt {
    let result = super.call("CCR", "CCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CCR", "CCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DECIMAL_PRECISION(): BigInt {
    let result = super.call(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DECIMAL_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LUSD_GAS_COMPENSATION(): BigInt {
    let result = super.call(
      "LUSD_GAS_COMPENSATION",
      "LUSD_GAS_COMPENSATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LUSD_GAS_COMPENSATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LUSD_GAS_COMPENSATION",
      "LUSD_GAS_COMPENSATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MCR(): BigInt {
    let result = super.call("MCR", "MCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MCR", "MCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_NET_DEBT(): BigInt {
    let result = super.call("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_NET_DEBT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  PERCENT_DIVISOR(): BigInt {
    let result = super.call(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_PERCENT_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _100pct(): BigInt {
    let result = super.call("_100pct", "_100pct():(uint256)", []);

    return result[0].toBigInt();
  }

  try__100pct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_100pct", "_100pct():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activePool(): Address {
    let result = super.call("activePool", "activePool():(address)", []);

    return result[0].toAddress();
  }

  try_activePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("activePool", "activePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultPool(): Address {
    let result = super.call("defaultPool", "defaultPool():(address)", []);

    return result[0].toAddress();
  }

  try_defaultPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("defaultPool", "defaultPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCompositeDebt(_debt: BigInt): BigInt {
    let result = super.call(
      "getCompositeDebt",
      "getCompositeDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_debt)],
    );

    return result[0].toBigInt();
  }

  try_getCompositeDebt(_debt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCompositeDebt",
      "getCompositeDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_debt)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemColl(): BigInt {
    let result = super.call(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemColl(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemDebt(): BigInt {
    let result = super.call(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lqtyStaking(): Address {
    let result = super.call("lqtyStaking", "lqtyStaking():(address)", []);

    return result[0].toAddress();
  }

  try_lqtyStaking(): ethereum.CallResult<Address> {
    let result = super.tryCall("lqtyStaking", "lqtyStaking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lqtyStakingAddress(): Address {
    let result = super.call(
      "lqtyStakingAddress",
      "lqtyStakingAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_lqtyStakingAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lqtyStakingAddress",
      "lqtyStakingAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lusdToken(): Address {
    let result = super.call("lusdToken", "lusdToken():(address)", []);

    return result[0].toAddress();
  }

  try_lusdToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lusdToken", "lusdToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sortedTroves(): Address {
    let result = super.call("sortedTroves", "sortedTroves():(address)", []);

    return result[0].toAddress();
  }

  try_sortedTroves(): ethereum.CallResult<Address> {
    let result = super.tryCall("sortedTroves", "sortedTroves():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  troveManager(): Address {
    let result = super.call("troveManager", "troveManager():(address)", []);

    return result[0].toAddress();
  }

  try_troveManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("troveManager", "troveManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddCollCall extends ethereum.Call {
  get inputs(): AddCollCall__Inputs {
    return new AddCollCall__Inputs(this);
  }

  get outputs(): AddCollCall__Outputs {
    return new AddCollCall__Outputs(this);
  }
}

export class AddCollCall__Inputs {
  _call: AddCollCall;

  constructor(call: AddCollCall) {
    this._call = call;
  }

  get _upperHint(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCollCall__Outputs {
  _call: AddCollCall;

  constructor(call: AddCollCall) {
    this._call = call;
  }
}

export class AdjustTroveCall extends ethereum.Call {
  get inputs(): AdjustTroveCall__Inputs {
    return new AdjustTroveCall__Inputs(this);
  }

  get outputs(): AdjustTroveCall__Outputs {
    return new AdjustTroveCall__Outputs(this);
  }
}

export class AdjustTroveCall__Inputs {
  _call: AdjustTroveCall;

  constructor(call: AdjustTroveCall) {
    this._call = call;
  }

  get _maxFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collWithdrawal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _LUSDChange(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _isDebtIncrease(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _upperHint(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class AdjustTroveCall__Outputs {
  _call: AdjustTroveCall;

  constructor(call: AdjustTroveCall) {
    this._call = call;
  }
}

export class ClaimCollateralCall extends ethereum.Call {
  get inputs(): ClaimCollateralCall__Inputs {
    return new ClaimCollateralCall__Inputs(this);
  }

  get outputs(): ClaimCollateralCall__Outputs {
    return new ClaimCollateralCall__Outputs(this);
  }
}

export class ClaimCollateralCall__Inputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }
}

export class ClaimCollateralCall__Outputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }
}

export class CloseTroveCall extends ethereum.Call {
  get inputs(): CloseTroveCall__Inputs {
    return new CloseTroveCall__Inputs(this);
  }

  get outputs(): CloseTroveCall__Outputs {
    return new CloseTroveCall__Outputs(this);
  }
}

export class CloseTroveCall__Inputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }
}

export class CloseTroveCall__Outputs {
  _call: CloseTroveCall;

  constructor(call: CloseTroveCall) {
    this._call = call;
  }
}

export class MoveETHGainToTroveCall extends ethereum.Call {
  get inputs(): MoveETHGainToTroveCall__Inputs {
    return new MoveETHGainToTroveCall__Inputs(this);
  }

  get outputs(): MoveETHGainToTroveCall__Outputs {
    return new MoveETHGainToTroveCall__Outputs(this);
  }
}

export class MoveETHGainToTroveCall__Inputs {
  _call: MoveETHGainToTroveCall;

  constructor(call: MoveETHGainToTroveCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _upperHint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MoveETHGainToTroveCall__Outputs {
  _call: MoveETHGainToTroveCall;

  constructor(call: MoveETHGainToTroveCall) {
    this._call = call;
  }
}

export class OpenTroveCall extends ethereum.Call {
  get inputs(): OpenTroveCall__Inputs {
    return new OpenTroveCall__Inputs(this);
  }

  get outputs(): OpenTroveCall__Outputs {
    return new OpenTroveCall__Outputs(this);
  }
}

export class OpenTroveCall__Inputs {
  _call: OpenTroveCall;

  constructor(call: OpenTroveCall) {
    this._call = call;
  }

  get _maxFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _LUSDAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _upperHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class OpenTroveCall__Outputs {
  _call: OpenTroveCall;

  constructor(call: OpenTroveCall) {
    this._call = call;
  }
}

export class RepayLUSDCall extends ethereum.Call {
  get inputs(): RepayLUSDCall__Inputs {
    return new RepayLUSDCall__Inputs(this);
  }

  get outputs(): RepayLUSDCall__Outputs {
    return new RepayLUSDCall__Outputs(this);
  }
}

export class RepayLUSDCall__Inputs {
  _call: RepayLUSDCall;

  constructor(call: RepayLUSDCall) {
    this._call = call;
  }

  get _LUSDAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _upperHint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RepayLUSDCall__Outputs {
  _call: RepayLUSDCall;

  constructor(call: RepayLUSDCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _troveManagerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _activePoolAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultPoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stabilityPoolAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _gasPoolAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _collSurplusPoolAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _priceFeedAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _sortedTrovesAddress(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _lusdTokenAddress(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _lqtyStakingAddress(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class WithdrawCollCall extends ethereum.Call {
  get inputs(): WithdrawCollCall__Inputs {
    return new WithdrawCollCall__Inputs(this);
  }

  get outputs(): WithdrawCollCall__Outputs {
    return new WithdrawCollCall__Outputs(this);
  }
}

export class WithdrawCollCall__Inputs {
  _call: WithdrawCollCall;

  constructor(call: WithdrawCollCall) {
    this._call = call;
  }

  get _collWithdrawal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _upperHint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCollCall__Outputs {
  _call: WithdrawCollCall;

  constructor(call: WithdrawCollCall) {
    this._call = call;
  }
}

export class WithdrawLUSDCall extends ethereum.Call {
  get inputs(): WithdrawLUSDCall__Inputs {
    return new WithdrawLUSDCall__Inputs(this);
  }

  get outputs(): WithdrawLUSDCall__Outputs {
    return new WithdrawLUSDCall__Outputs(this);
  }
}

export class WithdrawLUSDCall__Inputs {
  _call: WithdrawLUSDCall;

  constructor(call: WithdrawLUSDCall) {
    this._call = call;
  }

  get _maxFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _LUSDAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _upperHint(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class WithdrawLUSDCall__Outputs {
  _call: WithdrawLUSDCall;

  constructor(call: WithdrawLUSDCall) {
    this._call = call;
  }
}
