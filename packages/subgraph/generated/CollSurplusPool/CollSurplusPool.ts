// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ActivePoolAddressChanged extends ethereum.Event {
  get params(): ActivePoolAddressChanged__Params {
    return new ActivePoolAddressChanged__Params(this);
  }
}

export class ActivePoolAddressChanged__Params {
  _event: ActivePoolAddressChanged;

  constructor(event: ActivePoolAddressChanged) {
    this._event = event;
  }

  get _newActivePoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BorrowerOperationsAddressChanged extends ethereum.Event {
  get params(): BorrowerOperationsAddressChanged__Params {
    return new BorrowerOperationsAddressChanged__Params(this);
  }
}

export class BorrowerOperationsAddressChanged__Params {
  _event: BorrowerOperationsAddressChanged;

  constructor(event: BorrowerOperationsAddressChanged) {
    this._event = event;
  }

  get _newBorrowerOperationsAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollBalanceUpdated extends ethereum.Event {
  get params(): CollBalanceUpdated__Params {
    return new CollBalanceUpdated__Params(this);
  }
}

export class CollBalanceUpdated__Params {
  _event: CollBalanceUpdated;

  constructor(event: CollBalanceUpdated) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EtherSent extends ethereum.Event {
  get params(): EtherSent__Params {
    return new EtherSent__Params(this);
  }
}

export class EtherSent__Params {
  _event: EtherSent;

  constructor(event: EtherSent) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TroveManagerAddressChanged extends ethereum.Event {
  get params(): TroveManagerAddressChanged__Params {
    return new TroveManagerAddressChanged__Params(this);
  }
}

export class TroveManagerAddressChanged__Params {
  _event: TroveManagerAddressChanged;

  constructor(event: TroveManagerAddressChanged) {
    this._event = event;
  }

  get _newTroveManagerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CollSurplusPool extends ethereum.SmartContract {
  static bind(address: Address): CollSurplusPool {
    return new CollSurplusPool("CollSurplusPool", address);
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  activePoolAddress(): Address {
    let result = super.call(
      "activePoolAddress",
      "activePoolAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_activePoolAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "activePoolAddress",
      "activePoolAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowerOperationsAddress(): Address {
    let result = super.call(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_borrowerOperationsAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowerOperationsAddress",
      "borrowerOperationsAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateral(_account: Address): BigInt {
    let result = super.call(
      "getCollateral",
      "getCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(_account)],
    );

    return result[0].toBigInt();
  }

  try_getCollateral(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateral",
      "getCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(_account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getETH(): BigInt {
    let result = super.call("getETH", "getETH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getETH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getETH", "getETH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  troveManagerAddress(): Address {
    let result = super.call(
      "troveManagerAddress",
      "troveManagerAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_troveManagerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "troveManagerAddress",
      "troveManagerAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AccountSurplusCall extends ethereum.Call {
  get inputs(): AccountSurplusCall__Inputs {
    return new AccountSurplusCall__Inputs(this);
  }

  get outputs(): AccountSurplusCall__Outputs {
    return new AccountSurplusCall__Outputs(this);
  }
}

export class AccountSurplusCall__Inputs {
  _call: AccountSurplusCall;

  constructor(call: AccountSurplusCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AccountSurplusCall__Outputs {
  _call: AccountSurplusCall;

  constructor(call: AccountSurplusCall) {
    this._call = call;
  }
}

export class ClaimCollCall extends ethereum.Call {
  get inputs(): ClaimCollCall__Inputs {
    return new ClaimCollCall__Inputs(this);
  }

  get outputs(): ClaimCollCall__Outputs {
    return new ClaimCollCall__Outputs(this);
  }
}

export class ClaimCollCall__Inputs {
  _call: ClaimCollCall;

  constructor(call: ClaimCollCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimCollCall__Outputs {
  _call: ClaimCollCall;

  constructor(call: ClaimCollCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _borrowerOperationsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _troveManagerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _activePoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}
