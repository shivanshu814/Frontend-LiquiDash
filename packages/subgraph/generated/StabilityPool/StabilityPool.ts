// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ActivePoolAddressChanged extends ethereum.Event {
  get params(): ActivePoolAddressChanged__Params {
    return new ActivePoolAddressChanged__Params(this);
  }
}

export class ActivePoolAddressChanged__Params {
  _event: ActivePoolAddressChanged;

  constructor(event: ActivePoolAddressChanged) {
    this._event = event;
  }

  get _newActivePoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BorrowerOperationsAddressChanged extends ethereum.Event {
  get params(): BorrowerOperationsAddressChanged__Params {
    return new BorrowerOperationsAddressChanged__Params(this);
  }
}

export class BorrowerOperationsAddressChanged__Params {
  _event: BorrowerOperationsAddressChanged;

  constructor(event: BorrowerOperationsAddressChanged) {
    this._event = event;
  }

  get _newBorrowerOperationsAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CommunityIssuanceAddressChanged extends ethereum.Event {
  get params(): CommunityIssuanceAddressChanged__Params {
    return new CommunityIssuanceAddressChanged__Params(this);
  }
}

export class CommunityIssuanceAddressChanged__Params {
  _event: CommunityIssuanceAddressChanged;

  constructor(event: CommunityIssuanceAddressChanged) {
    this._event = event;
  }

  get _newCommunityIssuanceAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DefaultPoolAddressChanged extends ethereum.Event {
  get params(): DefaultPoolAddressChanged__Params {
    return new DefaultPoolAddressChanged__Params(this);
  }
}

export class DefaultPoolAddressChanged__Params {
  _event: DefaultPoolAddressChanged;

  constructor(event: DefaultPoolAddressChanged) {
    this._event = event;
  }

  get _newDefaultPoolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DepositSnapshotUpdated extends ethereum.Event {
  get params(): DepositSnapshotUpdated__Params {
    return new DepositSnapshotUpdated__Params(this);
  }
}

export class DepositSnapshotUpdated__Params {
  _event: DepositSnapshotUpdated;

  constructor(event: DepositSnapshotUpdated) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _P(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _S(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _G(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ETHGainWithdrawn extends ethereum.Event {
  get params(): ETHGainWithdrawn__Params {
    return new ETHGainWithdrawn__Params(this);
  }
}

export class ETHGainWithdrawn__Params {
  _event: ETHGainWithdrawn;

  constructor(event: ETHGainWithdrawn) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _ETH(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _LUSDLoss(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EpochUpdated extends ethereum.Event {
  get params(): EpochUpdated__Params {
    return new EpochUpdated__Params(this);
  }
}

export class EpochUpdated__Params {
  _event: EpochUpdated;

  constructor(event: EpochUpdated) {
    this._event = event;
  }

  get _currentEpoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EtherSent extends ethereum.Event {
  get params(): EtherSent__Params {
    return new EtherSent__Params(this);
  }
}

export class EtherSent__Params {
  _event: EtherSent;

  constructor(event: EtherSent) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FrontEndRegistered extends ethereum.Event {
  get params(): FrontEndRegistered__Params {
    return new FrontEndRegistered__Params(this);
  }
}

export class FrontEndRegistered__Params {
  _event: FrontEndRegistered;

  constructor(event: FrontEndRegistered) {
    this._event = event;
  }

  get _frontEnd(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _kickbackRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FrontEndSnapshotUpdated extends ethereum.Event {
  get params(): FrontEndSnapshotUpdated__Params {
    return new FrontEndSnapshotUpdated__Params(this);
  }
}

export class FrontEndSnapshotUpdated__Params {
  _event: FrontEndSnapshotUpdated;

  constructor(event: FrontEndSnapshotUpdated) {
    this._event = event;
  }

  get _frontEnd(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _P(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _G(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FrontEndStakeChanged extends ethereum.Event {
  get params(): FrontEndStakeChanged__Params {
    return new FrontEndStakeChanged__Params(this);
  }
}

export class FrontEndStakeChanged__Params {
  _event: FrontEndStakeChanged;

  constructor(event: FrontEndStakeChanged) {
    this._event = event;
  }

  get _frontEnd(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newFrontEndStake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _depositor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FrontEndTagSet extends ethereum.Event {
  get params(): FrontEndTagSet__Params {
    return new FrontEndTagSet__Params(this);
  }
}

export class FrontEndTagSet__Params {
  _event: FrontEndTagSet;

  constructor(event: FrontEndTagSet) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _frontEnd(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class G_Updated extends ethereum.Event {
  get params(): G_Updated__Params {
    return new G_Updated__Params(this);
  }
}

export class G_Updated__Params {
  _event: G_Updated;

  constructor(event: G_Updated) {
    this._event = event;
  }

  get _G(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _scale(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LQTYPaidToDepositor extends ethereum.Event {
  get params(): LQTYPaidToDepositor__Params {
    return new LQTYPaidToDepositor__Params(this);
  }
}

export class LQTYPaidToDepositor__Params {
  _event: LQTYPaidToDepositor;

  constructor(event: LQTYPaidToDepositor) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _LQTY(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LQTYPaidToFrontEnd extends ethereum.Event {
  get params(): LQTYPaidToFrontEnd__Params {
    return new LQTYPaidToFrontEnd__Params(this);
  }
}

export class LQTYPaidToFrontEnd__Params {
  _event: LQTYPaidToFrontEnd;

  constructor(event: LQTYPaidToFrontEnd) {
    this._event = event;
  }

  get _frontEnd(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _LQTY(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LUSDTokenAddressChanged extends ethereum.Event {
  get params(): LUSDTokenAddressChanged__Params {
    return new LUSDTokenAddressChanged__Params(this);
  }
}

export class LUSDTokenAddressChanged__Params {
  _event: LUSDTokenAddressChanged;

  constructor(event: LUSDTokenAddressChanged) {
    this._event = event;
  }

  get _newLUSDTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class P_Updated extends ethereum.Event {
  get params(): P_Updated__Params {
    return new P_Updated__Params(this);
  }
}

export class P_Updated__Params {
  _event: P_Updated;

  constructor(event: P_Updated) {
    this._event = event;
  }

  get _P(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PriceFeedAddressChanged extends ethereum.Event {
  get params(): PriceFeedAddressChanged__Params {
    return new PriceFeedAddressChanged__Params(this);
  }
}

export class PriceFeedAddressChanged__Params {
  _event: PriceFeedAddressChanged;

  constructor(event: PriceFeedAddressChanged) {
    this._event = event;
  }

  get _newPriceFeedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class S_Updated extends ethereum.Event {
  get params(): S_Updated__Params {
    return new S_Updated__Params(this);
  }
}

export class S_Updated__Params {
  _event: S_Updated;

  constructor(event: S_Updated) {
    this._event = event;
  }

  get _S(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _scale(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ScaleUpdated extends ethereum.Event {
  get params(): ScaleUpdated__Params {
    return new ScaleUpdated__Params(this);
  }
}

export class ScaleUpdated__Params {
  _event: ScaleUpdated;

  constructor(event: ScaleUpdated) {
    this._event = event;
  }

  get _currentScale(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SortedTrovesAddressChanged extends ethereum.Event {
  get params(): SortedTrovesAddressChanged__Params {
    return new SortedTrovesAddressChanged__Params(this);
  }
}

export class SortedTrovesAddressChanged__Params {
  _event: SortedTrovesAddressChanged;

  constructor(event: SortedTrovesAddressChanged) {
    this._event = event;
  }

  get _newSortedTrovesAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StabilityPoolETHBalanceUpdated extends ethereum.Event {
  get params(): StabilityPoolETHBalanceUpdated__Params {
    return new StabilityPoolETHBalanceUpdated__Params(this);
  }
}

export class StabilityPoolETHBalanceUpdated__Params {
  _event: StabilityPoolETHBalanceUpdated;

  constructor(event: StabilityPoolETHBalanceUpdated) {
    this._event = event;
  }

  get _newBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StabilityPoolLUSDBalanceUpdated extends ethereum.Event {
  get params(): StabilityPoolLUSDBalanceUpdated__Params {
    return new StabilityPoolLUSDBalanceUpdated__Params(this);
  }
}

export class StabilityPoolLUSDBalanceUpdated__Params {
  _event: StabilityPoolLUSDBalanceUpdated;

  constructor(event: StabilityPoolLUSDBalanceUpdated) {
    this._event = event;
  }

  get _newBalance(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TroveManagerAddressChanged extends ethereum.Event {
  get params(): TroveManagerAddressChanged__Params {
    return new TroveManagerAddressChanged__Params(this);
  }
}

export class TroveManagerAddressChanged__Params {
  _event: TroveManagerAddressChanged;

  constructor(event: TroveManagerAddressChanged) {
    this._event = event;
  }

  get _newTroveManagerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserDepositChanged extends ethereum.Event {
  get params(): UserDepositChanged__Params {
    return new UserDepositChanged__Params(this);
  }
}

export class UserDepositChanged__Params {
  _event: UserDepositChanged;

  constructor(event: UserDepositChanged) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newDeposit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StabilityPool__depositSnapshotsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getS(): BigInt {
    return this.value0;
  }

  getP(): BigInt {
    return this.value1;
  }

  getG(): BigInt {
    return this.value2;
  }

  getScale(): BigInt {
    return this.value3;
  }

  getEpoch(): BigInt {
    return this.value4;
  }
}

export class StabilityPool__depositsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getInitialValue(): BigInt {
    return this.value0;
  }

  getFrontEndTag(): Address {
    return this.value1;
  }
}

export class StabilityPool__frontEndSnapshotsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getS(): BigInt {
    return this.value0;
  }

  getP(): BigInt {
    return this.value1;
  }

  getG(): BigInt {
    return this.value2;
  }

  getScale(): BigInt {
    return this.value3;
  }

  getEpoch(): BigInt {
    return this.value4;
  }
}

export class StabilityPool__frontEndsResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getKickbackRate(): BigInt {
    return this.value0;
  }

  getRegistered(): boolean {
    return this.value1;
  }
}

export class StabilityPool extends ethereum.SmartContract {
  static bind(address: Address): StabilityPool {
    return new StabilityPool("StabilityPool", address);
  }

  BORROWING_FEE_FLOOR(): BigInt {
    let result = super.call(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BORROWING_FEE_FLOOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BORROWING_FEE_FLOOR",
      "BORROWING_FEE_FLOOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CCR(): BigInt {
    let result = super.call("CCR", "CCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_CCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("CCR", "CCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DECIMAL_PRECISION(): BigInt {
    let result = super.call(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DECIMAL_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DECIMAL_PRECISION",
      "DECIMAL_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LUSD_GAS_COMPENSATION(): BigInt {
    let result = super.call(
      "LUSD_GAS_COMPENSATION",
      "LUSD_GAS_COMPENSATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LUSD_GAS_COMPENSATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LUSD_GAS_COMPENSATION",
      "LUSD_GAS_COMPENSATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MCR(): BigInt {
    let result = super.call("MCR", "MCR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MCR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MCR", "MCR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_NET_DEBT(): BigInt {
    let result = super.call("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_NET_DEBT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_NET_DEBT", "MIN_NET_DEBT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NAME(): string {
    let result = super.call("NAME", "NAME():(string)", []);

    return result[0].toString();
  }

  try_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("NAME", "NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  P(): BigInt {
    let result = super.call("P", "P():(uint256)", []);

    return result[0].toBigInt();
  }

  try_P(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("P", "P():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERCENT_DIVISOR(): BigInt {
    let result = super.call(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_PERCENT_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SCALE_FACTOR(): BigInt {
    let result = super.call("SCALE_FACTOR", "SCALE_FACTOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SCALE_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SCALE_FACTOR", "SCALE_FACTOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _100pct(): BigInt {
    let result = super.call("_100pct", "_100pct():(uint256)", []);

    return result[0].toBigInt();
  }

  try__100pct(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_100pct", "_100pct():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activePool(): Address {
    let result = super.call("activePool", "activePool():(address)", []);

    return result[0].toAddress();
  }

  try_activePool(): ethereum.CallResult<Address> {
    let result = super.tryCall("activePool", "activePool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowerOperations(): Address {
    let result = super.call(
      "borrowerOperations",
      "borrowerOperations():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_borrowerOperations(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowerOperations",
      "borrowerOperations():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  communityIssuance(): Address {
    let result = super.call(
      "communityIssuance",
      "communityIssuance():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_communityIssuance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "communityIssuance",
      "communityIssuance():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentEpoch(): BigInt {
    let result = super.call("currentEpoch", "currentEpoch():(uint128)", []);

    return result[0].toBigInt();
  }

  try_currentEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentEpoch", "currentEpoch():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentScale(): BigInt {
    let result = super.call("currentScale", "currentScale():(uint128)", []);

    return result[0].toBigInt();
  }

  try_currentScale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentScale", "currentScale():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultPool(): Address {
    let result = super.call("defaultPool", "defaultPool():(address)", []);

    return result[0].toAddress();
  }

  try_defaultPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("defaultPool", "defaultPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositSnapshots(param0: Address): StabilityPool__depositSnapshotsResult {
    let result = super.call(
      "depositSnapshots",
      "depositSnapshots(address):(uint256,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new StabilityPool__depositSnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_depositSnapshots(
    param0: Address,
  ): ethereum.CallResult<StabilityPool__depositSnapshotsResult> {
    let result = super.tryCall(
      "depositSnapshots",
      "depositSnapshots(address):(uint256,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StabilityPool__depositSnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  deposits(param0: Address): StabilityPool__depositsResult {
    let result = super.call("deposits", "deposits(address):(uint256,address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return new StabilityPool__depositsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
    );
  }

  try_deposits(
    param0: Address,
  ): ethereum.CallResult<StabilityPool__depositsResult> {
    let result = super.tryCall(
      "deposits",
      "deposits(address):(uint256,address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StabilityPool__depositsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
      ),
    );
  }

  epochToScaleToG(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "epochToScaleToG",
      "epochToScaleToG(uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_epochToScaleToG(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochToScaleToG",
      "epochToScaleToG(uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochToScaleToSum(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "epochToScaleToSum",
      "epochToScaleToSum(uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_epochToScaleToSum(
    param0: BigInt,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "epochToScaleToSum",
      "epochToScaleToSum(uint128,uint128):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  frontEndSnapshots(param0: Address): StabilityPool__frontEndSnapshotsResult {
    let result = super.call(
      "frontEndSnapshots",
      "frontEndSnapshots(address):(uint256,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new StabilityPool__frontEndSnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_frontEndSnapshots(
    param0: Address,
  ): ethereum.CallResult<StabilityPool__frontEndSnapshotsResult> {
    let result = super.tryCall(
      "frontEndSnapshots",
      "frontEndSnapshots(address):(uint256,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StabilityPool__frontEndSnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  frontEndStakes(param0: Address): BigInt {
    let result = super.call(
      "frontEndStakes",
      "frontEndStakes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_frontEndStakes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "frontEndStakes",
      "frontEndStakes(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  frontEnds(param0: Address): StabilityPool__frontEndsResult {
    let result = super.call("frontEnds", "frontEnds(address):(uint256,bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return new StabilityPool__frontEndsResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
    );
  }

  try_frontEnds(
    param0: Address,
  ): ethereum.CallResult<StabilityPool__frontEndsResult> {
    let result = super.tryCall(
      "frontEnds",
      "frontEnds(address):(uint256,bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StabilityPool__frontEndsResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
      ),
    );
  }

  getCompoundedFrontEndStake(_frontEnd: Address): BigInt {
    let result = super.call(
      "getCompoundedFrontEndStake",
      "getCompoundedFrontEndStake(address):(uint256)",
      [ethereum.Value.fromAddress(_frontEnd)],
    );

    return result[0].toBigInt();
  }

  try_getCompoundedFrontEndStake(
    _frontEnd: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCompoundedFrontEndStake",
      "getCompoundedFrontEndStake(address):(uint256)",
      [ethereum.Value.fromAddress(_frontEnd)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCompoundedLUSDDeposit(_depositor: Address): BigInt {
    let result = super.call(
      "getCompoundedLUSDDeposit",
      "getCompoundedLUSDDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)],
    );

    return result[0].toBigInt();
  }

  try_getCompoundedLUSDDeposit(
    _depositor: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCompoundedLUSDDeposit",
      "getCompoundedLUSDDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositorETHGain(_depositor: Address): BigInt {
    let result = super.call(
      "getDepositorETHGain",
      "getDepositorETHGain(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)],
    );

    return result[0].toBigInt();
  }

  try_getDepositorETHGain(_depositor: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositorETHGain",
      "getDepositorETHGain(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositorLQTYGain(_depositor: Address): BigInt {
    let result = super.call(
      "getDepositorLQTYGain",
      "getDepositorLQTYGain(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)],
    );

    return result[0].toBigInt();
  }

  try_getDepositorLQTYGain(_depositor: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositorLQTYGain",
      "getDepositorLQTYGain(address):(uint256)",
      [ethereum.Value.fromAddress(_depositor)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getETH(): BigInt {
    let result = super.call("getETH", "getETH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getETH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getETH", "getETH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemColl(): BigInt {
    let result = super.call(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemColl(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemColl",
      "getEntireSystemColl():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEntireSystemDebt(): BigInt {
    let result = super.call(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getEntireSystemDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntireSystemDebt",
      "getEntireSystemDebt():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFrontEndLQTYGain(_frontEnd: Address): BigInt {
    let result = super.call(
      "getFrontEndLQTYGain",
      "getFrontEndLQTYGain(address):(uint256)",
      [ethereum.Value.fromAddress(_frontEnd)],
    );

    return result[0].toBigInt();
  }

  try_getFrontEndLQTYGain(_frontEnd: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFrontEndLQTYGain",
      "getFrontEndLQTYGain(address):(uint256)",
      [ethereum.Value.fromAddress(_frontEnd)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalLUSDDeposits(): BigInt {
    let result = super.call(
      "getTotalLUSDDeposits",
      "getTotalLUSDDeposits():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalLUSDDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalLUSDDeposits",
      "getTotalLUSDDeposits():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastETHError_Offset(): BigInt {
    let result = super.call(
      "lastETHError_Offset",
      "lastETHError_Offset():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastETHError_Offset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastETHError_Offset",
      "lastETHError_Offset():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastLQTYError(): BigInt {
    let result = super.call("lastLQTYError", "lastLQTYError():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastLQTYError(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastLQTYError",
      "lastLQTYError():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastLUSDLossError_Offset(): BigInt {
    let result = super.call(
      "lastLUSDLossError_Offset",
      "lastLUSDLossError_Offset():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastLUSDLossError_Offset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastLUSDLossError_Offset",
      "lastLUSDLossError_Offset():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lusdToken(): Address {
    let result = super.call("lusdToken", "lusdToken():(address)", []);

    return result[0].toAddress();
  }

  try_lusdToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lusdToken", "lusdToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sortedTroves(): Address {
    let result = super.call("sortedTroves", "sortedTroves():(address)", []);

    return result[0].toAddress();
  }

  try_sortedTroves(): ethereum.CallResult<Address> {
    let result = super.tryCall("sortedTroves", "sortedTroves():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  troveManager(): Address {
    let result = super.call("troveManager", "troveManager():(address)", []);

    return result[0].toAddress();
  }

  try_troveManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("troveManager", "troveManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class OffsetCall extends ethereum.Call {
  get inputs(): OffsetCall__Inputs {
    return new OffsetCall__Inputs(this);
  }

  get outputs(): OffsetCall__Outputs {
    return new OffsetCall__Outputs(this);
  }
}

export class OffsetCall__Inputs {
  _call: OffsetCall;

  constructor(call: OffsetCall) {
    this._call = call;
  }

  get _debtToOffset(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collToAdd(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OffsetCall__Outputs {
  _call: OffsetCall;

  constructor(call: OffsetCall) {
    this._call = call;
  }
}

export class ProvideToSPCall extends ethereum.Call {
  get inputs(): ProvideToSPCall__Inputs {
    return new ProvideToSPCall__Inputs(this);
  }

  get outputs(): ProvideToSPCall__Outputs {
    return new ProvideToSPCall__Outputs(this);
  }
}

export class ProvideToSPCall__Inputs {
  _call: ProvideToSPCall;

  constructor(call: ProvideToSPCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _frontEndTag(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ProvideToSPCall__Outputs {
  _call: ProvideToSPCall;

  constructor(call: ProvideToSPCall) {
    this._call = call;
  }
}

export class RegisterFrontEndCall extends ethereum.Call {
  get inputs(): RegisterFrontEndCall__Inputs {
    return new RegisterFrontEndCall__Inputs(this);
  }

  get outputs(): RegisterFrontEndCall__Outputs {
    return new RegisterFrontEndCall__Outputs(this);
  }
}

export class RegisterFrontEndCall__Inputs {
  _call: RegisterFrontEndCall;

  constructor(call: RegisterFrontEndCall) {
    this._call = call;
  }

  get _kickbackRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RegisterFrontEndCall__Outputs {
  _call: RegisterFrontEndCall;

  constructor(call: RegisterFrontEndCall) {
    this._call = call;
  }
}

export class SetAddressesCall extends ethereum.Call {
  get inputs(): SetAddressesCall__Inputs {
    return new SetAddressesCall__Inputs(this);
  }

  get outputs(): SetAddressesCall__Outputs {
    return new SetAddressesCall__Outputs(this);
  }
}

export class SetAddressesCall__Inputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }

  get _borrowerOperationsAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _troveManagerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _activePoolAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lusdTokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _sortedTrovesAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _priceFeedAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _communityIssuanceAddress(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class SetAddressesCall__Outputs {
  _call: SetAddressesCall;

  constructor(call: SetAddressesCall) {
    this._call = call;
  }
}

export class WithdrawETHGainToTroveCall extends ethereum.Call {
  get inputs(): WithdrawETHGainToTroveCall__Inputs {
    return new WithdrawETHGainToTroveCall__Inputs(this);
  }

  get outputs(): WithdrawETHGainToTroveCall__Outputs {
    return new WithdrawETHGainToTroveCall__Outputs(this);
  }
}

export class WithdrawETHGainToTroveCall__Inputs {
  _call: WithdrawETHGainToTroveCall;

  constructor(call: WithdrawETHGainToTroveCall) {
    this._call = call;
  }

  get _upperHint(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _lowerHint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawETHGainToTroveCall__Outputs {
  _call: WithdrawETHGainToTroveCall;

  constructor(call: WithdrawETHGainToTroveCall) {
    this._call = call;
  }
}

export class WithdrawFromSPCall extends ethereum.Call {
  get inputs(): WithdrawFromSPCall__Inputs {
    return new WithdrawFromSPCall__Inputs(this);
  }

  get outputs(): WithdrawFromSPCall__Outputs {
    return new WithdrawFromSPCall__Outputs(this);
  }
}

export class WithdrawFromSPCall__Inputs {
  _call: WithdrawFromSPCall;

  constructor(call: WithdrawFromSPCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawFromSPCall__Outputs {
  _call: WithdrawFromSPCall;

  constructor(call: WithdrawFromSPCall) {
    this._call = call;
  }
}
