'use client';
import { useQueryClient } from '@tanstack/react-query';
import {} from '@wagmi/core/internal';
import { getConnectorClientQueryOptions, } from '@wagmi/core/query';
import { useEffect } from 'react';
import { useQuery, } from '../utils/query.js';
import { useAccount } from './useAccount.js';
import { useChainId } from './useChainId.js';
import { useConfig } from './useConfig.js';
/** https://wagmi.sh/react/api/hooks/useConnectorClient */
export function useConnectorClient(parameters = {}) {
    const { query = {} } = parameters;
    const config = useConfig(parameters);
    const queryClient = useQueryClient();
    const { address, connector, status } = useAccount();
    const chainId = useChainId();
    const { queryKey, ...options } = getConnectorClientQueryOptions(config, {
        ...parameters,
        chainId: parameters.chainId ?? chainId,
        connector: parameters.connector ?? connector,
    });
    const enabled = Boolean(status !== 'disconnected' && (query.enabled ?? true));
    // biome-ignore lint/nursery/useExhaustiveDependencies: `queryKey` not required
    useEffect(() => {
        // invalidate when address changes
        if (address)
            queryClient.invalidateQueries({ queryKey });
        else
            queryClient.removeQueries({ queryKey }); // remove when account is disconnected
    }, [address, queryClient]);
    return useQuery({
        ...query,
        ...options,
        queryKey,
        enabled,
        staleTime: Infinity,
    });
}
//# sourceMappingURL=useConnectorClient.js.map