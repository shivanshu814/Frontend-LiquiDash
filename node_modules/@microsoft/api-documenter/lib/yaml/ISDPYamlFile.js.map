{"version":3,"file":"ISDPYamlFile.js","sourceRoot":"","sources":["../../src/yaml/ISDPYamlFile.ts"],"names":[],"mappings":"","sourcesContent":["interface IBaseYamlModel {\r\n  uid: string;\r\n  name: string;\r\n  package?: string;\r\n  summary?: string;\r\n}\r\n\r\nexport type CommonYamlModel = IBaseYamlModel & {\r\n  syntax?: ISyntax;\r\n  fullName?: string;\r\n  isPreview?: boolean;\r\n  isDeprecated?: boolean;\r\n  remarks?: string;\r\n  customDeprecatedMessage?: string;\r\n};\r\n\r\nexport type PackageYamlModel = CommonYamlModel & {\r\n  classes?: Array<string>;\r\n  interfaces?: Array<string>;\r\n  enums?: Array<string>;\r\n  typeAliases?: Array<string>;\r\n  properties?: Array<FunctionYamlModel>;\r\n  type?: 'package' | 'module';\r\n  functions?: Array<FunctionYamlModel>;\r\n};\r\n\r\nexport type FunctionYamlModel = CommonYamlModel;\r\n\r\nexport type TypeAliasYamlModel = CommonYamlModel & {\r\n  syntax: string;\r\n};\r\n\r\nexport type TypeYamlModel = CommonYamlModel & {\r\n  constructors?: Array<FunctionYamlModel>;\r\n  properties?: Array<FunctionYamlModel>;\r\n  methods?: Array<FunctionYamlModel>;\r\n  type: 'class' | 'interface';\r\n  extends?: IType | string;\r\n};\r\n\r\nexport type EnumYamlModel = CommonYamlModel & {\r\n  fields: Array<FieldYamlModel>;\r\n};\r\n\r\nexport type FieldYamlModel = IBaseYamlModel & {\r\n  numericValue?: number;\r\n  value?: string;\r\n};\r\n\r\nexport interface ISyntax {\r\n  parameters?: Array<IYamlParameter>;\r\n  content?: string;\r\n  return?: IReturn;\r\n}\r\n\r\nexport interface IYamlParameter {\r\n  id: string;\r\n  type: IType | string;\r\n  description?: string;\r\n}\r\n\r\ninterface IReturn {\r\n  type: IType | string;\r\n  description?: string;\r\n}\r\n\r\nexport interface IType {\r\n  typeName?: string;\r\n  typeId?: number;\r\n  reflectedType?: IReflectedType;\r\n  genericType?: IGenericType;\r\n  intersectionType?: IIntersectionType;\r\n  unionType?: IUnionType;\r\n  arrayType?: IType | string;\r\n}\r\n\r\nexport interface IUnionType {\r\n  types: Types;\r\n}\r\n\r\nexport interface IIntersectionType {\r\n  types: Types;\r\n}\r\n\r\nexport interface IGenericType {\r\n  outter: IType | string;\r\n  inner: Types;\r\n}\r\n\r\nexport interface IReflectedType {\r\n  key: IType | string;\r\n  value: IType | string;\r\n}\r\n\r\nexport interface IException {\r\n  type: string;\r\n  description: string;\r\n}\r\n\r\ntype Types = IType[] | string[];\r\n"]}