{"version":3,"file":"ToSdpConvertHelper.js","sourceRoot":"","sources":["../../src/utils/ToSdpConvertHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  IYamlItem,\r\n  IYamlApiFile,\r\n  IYamlSyntax,\r\n  IYamlReferenceSpec,\r\n  IYamlReference\r\n} from '../yaml/IYamlApiFile';\r\nimport {\r\n  PackageYamlModel,\r\n  EnumYamlModel,\r\n  TypeAliasYamlModel,\r\n  TypeYamlModel,\r\n  FieldYamlModel,\r\n  FunctionYamlModel,\r\n  CommonYamlModel\r\n} from '../yaml/ISDPYamlFile';\r\nimport path from 'path';\r\nimport { FileSystem, Encoding, NewlineKind } from '@rushstack/node-core-library';\r\nimport yaml = require('js-yaml');\r\n\r\nexport function convertUDPYamlToSDP(folderPath: string): void {\r\n  convert(folderPath, folderPath);\r\n}\r\n\r\nfunction convert(inputPath: string, outputPath: string): void {\r\n  console.log();\r\n  if (!FileSystem.exists(inputPath)) {\r\n    console.error(`input path: ${inputPath} is not exist`);\r\n    return;\r\n  }\r\n\r\n  FileSystem.readFolder(inputPath).forEach((name) => {\r\n    const fpath: string = path.join(inputPath, name);\r\n    if (FileSystem.getStatistics(fpath).isFile()) {\r\n      // only convert yaml\r\n      if (!name.endsWith('.yml')) {\r\n        return;\r\n      }\r\n      // parse file\r\n      const yamlContent: string = FileSystem.readFile(fpath, { encoding: Encoding.Utf8 });\r\n      // only convert universalreference yaml\r\n      const isLegacyYaml: boolean = yamlContent.startsWith('### YamlMime:UniversalReference');\r\n      if (!isLegacyYaml) {\r\n        return;\r\n      }\r\n\r\n      console.log(`convert file ${fpath} from sdp to udp`);\r\n\r\n      const file: IYamlApiFile = yaml.safeLoad(yamlContent) as IYamlApiFile;\r\n      const result: { model: CommonYamlModel; type: string } | undefined = convertToSDP(file);\r\n      if (result && result.model) {\r\n        const stringified: string = `### YamlMime:TS${result.type}\\n${yaml.safeDump(result.model, {\r\n          lineWidth: 120\r\n        })}`;\r\n        FileSystem.writeFile(`${outputPath}/${name}`, stringified, {\r\n          convertLineEndings: NewlineKind.CrLf,\r\n          ensureFolderExists: true\r\n        });\r\n      } else {\r\n        console.log('not target file ', fpath);\r\n      }\r\n    } else {\r\n      // read contents\r\n      convert(fpath, path.join(outputPath, name));\r\n    }\r\n  });\r\n}\r\n\r\nfunction convertToPackageSDP(transfomredClass: IYamlApiFile): PackageYamlModel {\r\n  const element: IYamlItem = transfomredClass.items[0];\r\n  const packageModel: PackageYamlModel = {\r\n    uid: element.uid,\r\n    name: element.name!,\r\n    type: 'package'\r\n  };\r\n  if (element.summary) {\r\n    packageModel.summary = element.summary;\r\n  } else {\r\n    packageModel.summary = '';\r\n  }\r\n\r\n  // search in children\r\n  if (element.children) {\r\n    element.children.forEach((child) => {\r\n      if (child.endsWith(':class')) {\r\n        assignPackageModelFields(packageModel, 'classes', child);\r\n      } else if (child.endsWith(':interface')) {\r\n        assignPackageModelFields(packageModel, 'interfaces', child);\r\n      } else if (child.endsWith(':enum')) {\r\n        assignPackageModelFields(packageModel, 'enums', child);\r\n      } else if (child.endsWith(':type')) {\r\n        // version 1 ignore typeAlias\r\n        // assignPackageModelFields(packageModel, \"typeAliases\", child);\r\n      } else {\r\n        // console.log(\"other type: \", child)\r\n      }\r\n    });\r\n  }\r\n\r\n  for (let i: number = 1; i < transfomredClass.items.length; i++) {\r\n    const ele: IYamlItem = transfomredClass.items[i];\r\n    switch (ele.type) {\r\n      case 'typealias':\r\n        // need generate typeAlias file for this\r\n        break;\r\n      case 'function':\r\n        if (!packageModel.functions) {\r\n          packageModel.functions = [];\r\n        }\r\n        packageModel.functions.push(convertToFunctionSDP(ele, element.uid, transfomredClass));\r\n        break;\r\n      default:\r\n        // console.log(transfomredClass.items[0].name)\r\n        console.log('[warning] not applied type(package): ', ele.type);\r\n    }\r\n  }\r\n\r\n  return packageModel;\r\n}\r\n\r\nfunction assignPackageModelFields(\r\n  packageModel: PackageYamlModel,\r\n  name: 'classes' | 'interfaces' | 'enums' | 'typeAliases',\r\n  uid: string\r\n): void {\r\n  if (!packageModel[name]) {\r\n    packageModel[name] = [];\r\n  }\r\n  packageModel[name]!.push(uid);\r\n}\r\n\r\nfunction convertToSDP(transfomredClass: IYamlApiFile): { model: CommonYamlModel; type: string } | undefined {\r\n  const element: IYamlItem = transfomredClass.items[0];\r\n  switch (element.type) {\r\n    case 'class':\r\n    case 'interface':\r\n      return {\r\n        model: convertToTypeSDP(transfomredClass, element.type === 'class'),\r\n        type: 'Type'\r\n      };\r\n    case 'enum':\r\n      if (transfomredClass.items.length < 2) {\r\n        console.log(`[warning] enum ${element.uid}/${element.name} does not have fields`);\r\n        return undefined;\r\n      }\r\n      return { model: convertToEnumSDP(transfomredClass), type: 'Enum' };\r\n    case 'typealias':\r\n      return { model: convertToTypeAliasSDP(element, transfomredClass), type: 'TypeAlias' };\r\n    case 'package':\r\n      return {\r\n        model: convertToPackageSDP(transfomredClass),\r\n        type: 'Package'\r\n      };\r\n    default:\r\n      console.log('not applied type: ', element.type);\r\n      return undefined;\r\n  }\r\n}\r\n\r\nfunction convertToEnumSDP(transfomredClass: IYamlApiFile): EnumYamlModel {\r\n  const element: IYamlItem = transfomredClass.items[0];\r\n  const fields: FieldYamlModel[] = [];\r\n  for (let i: number = 1; i < transfomredClass.items.length; i++) {\r\n    const ele: IYamlItem = transfomredClass.items[i];\r\n    const field: FieldYamlModel = {\r\n      name: ele.name!,\r\n      uid: ele.uid,\r\n      package: element.package!\r\n    };\r\n\r\n    if (ele.summary) {\r\n      field.summary = ele.summary;\r\n    } else {\r\n      field.summary = '';\r\n    }\r\n\r\n    if (ele.numericValue) {\r\n      field.value = ele.numericValue;\r\n    }\r\n    fields.push(field);\r\n  }\r\n\r\n  const result: EnumYamlModel = {\r\n    ...convertCommonYamlModel(element, element.package!, transfomredClass),\r\n    fields: fields\r\n  };\r\n  return result;\r\n}\r\n\r\nfunction convertToTypeAliasSDP(element: IYamlItem, transfomredClass: IYamlApiFile): TypeAliasYamlModel {\r\n  const result: TypeAliasYamlModel = {\r\n    ...convertCommonYamlModel(element, element.package!, transfomredClass)\r\n  } as TypeAliasYamlModel;\r\n\r\n  if (element.syntax) {\r\n    result.syntax = element.syntax.content!;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction convertToTypeSDP(transfomredClass: IYamlApiFile, isClass: boolean): TypeYamlModel {\r\n  const element: IYamlItem = transfomredClass.items[0];\r\n  const constructors: CommonYamlModel[] = [];\r\n  const properties: CommonYamlModel[] = [];\r\n  const methods: CommonYamlModel[] = [];\r\n  for (let i: number = 1; i < transfomredClass.items.length; i++) {\r\n    const ele: IYamlItem = transfomredClass.items[i];\r\n    const item: CommonYamlModel = convertCommonYamlModel(ele, element.package!, transfomredClass);\r\n    if (ele.type === 'constructor') {\r\n      // interface does not need this field\r\n      if (isClass) {\r\n        constructors.push(item);\r\n      }\r\n    } else if (ele.type === 'property' || ele.type === 'event') {\r\n      properties.push(item);\r\n    } else if (ele.type === 'method') {\r\n      methods.push(item);\r\n    } else {\r\n      console.log(`[warning] ${ele.uid}#${ele.name} is not applied sub type ${ele.type} for type yaml`);\r\n    }\r\n  }\r\n  const result: TypeYamlModel = {\r\n    ...convertCommonYamlModel(element, element.package!, transfomredClass),\r\n    type: isClass ? 'class' : 'interface'\r\n  };\r\n  delete result.syntax;\r\n\r\n  if (constructors.length > 0) {\r\n    result.constructors = constructors;\r\n  }\r\n\r\n  if (properties.length > 0) {\r\n    result.properties = properties;\r\n  }\r\n\r\n  if (methods.length > 0) {\r\n    result.methods = methods;\r\n  }\r\n\r\n  if (element.extends && element.extends.length > 0) {\r\n    result.extends = convertSelfTypeToXref(element.extends[0] as string, transfomredClass);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction convertToFunctionSDP(\r\n  element: IYamlItem,\r\n  packageName: string,\r\n  transfomredClass: IYamlApiFile\r\n): FunctionYamlModel {\r\n  const model: CommonYamlModel = convertCommonYamlModel(element, packageName, transfomredClass);\r\n  // don't need these fields\r\n  delete model.fullName;\r\n  return model;\r\n}\r\n\r\nfunction convertCommonYamlModel(\r\n  element: IYamlItem,\r\n  packageName: string,\r\n  transfomredClass: IYamlApiFile\r\n): CommonYamlModel {\r\n  const result: CommonYamlModel = {\r\n    name: element.name!,\r\n    uid: element.uid,\r\n    package: packageName\r\n  };\r\n\r\n  if (element.fullName) {\r\n    result.fullName = element.fullName;\r\n  }\r\n\r\n  if (element.summary) {\r\n    result.summary = element.summary;\r\n  } else {\r\n    result.summary = '';\r\n  }\r\n\r\n  // because mustache meet same variable in different level\r\n  // such as: { \"pre\": true, \"list\": [{}]}\r\n  // if item in list wants to use pre but the pre is not assigned, it will use outer pre field.\r\n  // so, there need to set below variable explict\r\n\r\n  if (element.remarks) {\r\n    result.remarks = element.remarks;\r\n  } else {\r\n    result.remarks = '';\r\n  }\r\n\r\n  result.isPreview = element.isPreview;\r\n  if (!result.isPreview) {\r\n    result.isPreview = false;\r\n  }\r\n\r\n  if (element.deprecated) {\r\n    result.isDeprecated = true;\r\n    result.customDeprecatedMessage = element.deprecated.content;\r\n  } else {\r\n    result.isDeprecated = false;\r\n  }\r\n\r\n  if (element.syntax) {\r\n    result.syntax = {};\r\n\r\n    const syntax: IYamlSyntax = element.syntax;\r\n    result.syntax.content = syntax.content;\r\n    if (syntax.parameters && syntax.parameters.length > 0) {\r\n      syntax.parameters?.forEach((it) => {\r\n        delete it.optional;\r\n        delete it.defaultValue;\r\n      });\r\n      result.syntax.parameters = syntax.parameters.map((it) => {\r\n        return {\r\n          ...it,\r\n          id: it.id!,\r\n          type: convertSelfTypeToXref(escapeMarkdown(it.type![0] as string), transfomredClass)\r\n        };\r\n      });\r\n    }\r\n\r\n    if (syntax.return) {\r\n      result.syntax.return = {\r\n        ...syntax.return,\r\n        type: convertSelfTypeToXref(escapeMarkdown(syntax.return.type![0] as string), transfomredClass)\r\n      };\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction escapeMarkdown(name: string): string {\r\n  // eg: [key: string]: string\r\n  const markdownLinkRegEx: RegExp = /^\\s*(\\[.+\\]):(.+)/g;\r\n  return name.replace(markdownLinkRegEx, `$1\\\\:$2`);\r\n}\r\n\r\nfunction convertSelfTypeToXref(name: string, transfomredClass: IYamlApiFile): string {\r\n  let result: string = name;\r\n\r\n  // if complex type, need to get real type from references\r\n  if (result.endsWith(':complex')) {\r\n    const specs: IYamlReferenceSpec[] | undefined = transfomredClass.references?.find((item) => {\r\n      return item.uid === name;\r\n    })?.['spec.typeScript'];\r\n\r\n    if (specs && specs.length > 0) {\r\n      result = '';\r\n      for (const spec of specs) {\r\n        // start with ! will be node base type\r\n        if (spec.uid && !spec.uid.startsWith('!')) {\r\n          result += spec.uid;\r\n        } else {\r\n          result += spec.name;\r\n        }\r\n      }\r\n    }\r\n  } else if (result.startsWith('!')) {\r\n    // uid: '!Object:interface'\r\n    // name: Object\r\n    // start with !, not complex type, use reference name directly\r\n    const ref: IYamlReference | undefined = transfomredClass.references?.find((item) => {\r\n      return item.uid === name;\r\n    });\r\n    if (ref && ref.name) {\r\n      result = ref.name;\r\n    }\r\n  }\r\n  // parse < >\r\n  result = result.replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  const uidRegEx: RegExp = /(@?[\\w\\d\\-/!~\\.]+\\:[\\w\\d\\-\\(/]+)/g;\r\n\r\n  return result.replace(uidRegEx, `<xref uid=\"$1\" />`);\r\n}\r\n"]}